package com.heap;

import java.util.Collections;
import java.util.PriorityQueue;

public class KthElement {

    private static int largestElement(int[] arr, int k) {
        // min heap
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int i = 0; i < k; i++) {
            minHeap.add(arr[i]);
        }
        for (int i = k; i < arr.length; i++) {
            if (minHeap.peek() < arr[i]) {
                minHeap.remove();
                minHeap.add(arr[i]);
            }
        }
        return minHeap.peek();
    }

    private static int smallestElement(int[] arr, int k) {
        //  for max heap pass comparator
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        // add upto kth element
        for (int i = 0; i < k; i++) {
            maxHeap.add(arr[i]);
        }
        // check if the value is greater then remove and add
        for (int i = k; i < arr.length; i++) {
            if (maxHeap.peek() > arr[i]) {
                maxHeap.remove();
                maxHeap.add(arr[i]);
            }
        }
        return maxHeap.peek();
    }


    public static void main(String[] args) {
        int[] arr = {5, 4, 1, 2, 3, 6};
        int k = 3;
        // k and smallest or largets ---> Heap ---> priority queue by default in java minheap
        System.out.println(smallestElement(arr, k)); // 3
        System.out.println(largestElement(arr, k)); // 4
    }

}



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































